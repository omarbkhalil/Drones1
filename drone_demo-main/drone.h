/**
 * @brief Drone_demo project
 * @author B.Piranda
 * @date dec. 2024
 **/
#ifndef DRONE_H
#define DRONE_H

#include <QWidget>
#include <QProgressBar>
#include <vector2d.h>
#include <QImage>

class Drone : public QWidget {

    Q_OBJECT
public:

    const double maxSpeed=50; ///< max speed in pixels per second
    const double maxPower=200; ///< max power of drone motors
    const double takeoffSpeed=2.5; ///< unit/s
    const double hoveringHeight=5; ///< units
    const double coefCollision=1000; ///< coefficient for collision avoidment
    const double damping=0.2;        ///< damping for motion simulation
    const double chargingSpeed=10;   ///< speed of charging (power/s)
    const double powerConsumption=5; ///< speed of consumption (power/s)
    enum droneStatus { landed,takeoff,landing,hovering,turning,flying};
     void setServerName(const QString& name);
    QString getServerName() const;
    /**
     * @brief Drone constructor
     * @param p_name name of the drone
     * @param parent parent widget
     */
    explicit Drone(const QString &p_name,QWidget *parent = nullptr);
    /**
     * Drone destructor
     */
    ~Drone();
    /**
     * @brief Make the drone takeoff to move to a target position
     */
    inline void start() { status=takeoff; height=0; repaint(); }
    /**
     * @brief Ask for landing
     */
    inline void stop() { status=landing; }
    /**
     * @brief set the speed of fly of the drone
     * @param s: speed
     */
    inline void setSpeed(double s) { speedSetpoint=(s>maxSpeed?maxSpeed:s); }
    /**
     * @brief setInitialPosition set the initial position of the drone (takeoff place)
     * @param pos: the position
     */
    inline void setInitialPosition(const Vector2D& pos) { if (status==landed) position=pos; }
    /**
     * @brief setGoalPosition set the goal position of the drone (landing place)
     * @param pos: the position
     */
    inline void setGoalPosition(const Vector2D& pos) { goalPosition=pos; }
    /**
     * @brief getPosition get the current position of the drone
     * @return the position
     */
    inline Vector2D getPosition() { return position; }
    /**
     * @brief getStatus get the current status of the drone
     * @return the status
     */
    inline droneStatus getStatus() { return status; }
    /**
     * @brief getName get the name of the drone
     * @return the name
     */
    inline QString getName() { return name; }
    /**
    /** * @brief getAzimut get the direction of motion of the drone (angle in degree relatively to the y direction)
    /** * @return the angle in degree
    */
    inline double getAzimut() { return azimut; }
    /**
     * @brief get the Power rank between 0 and 100
     * @return the rank
     */
    inline double getPower() { return 100.0*power/maxPower; }
    void paintEvent(QPaintEvent*) override;
    void resizeEvent(QResizeEvent *event) override;

    void update(double dt);
    /**
     * @brief Prepare data for collision detections
     */
    void initCollision();
    /**
     * @brief Add a collision force
     * @param A: position of the other drone to test
     * @param threshold: distance of collision detection
     */
    void addCollision(const Vector2D& A,float threshold);
    /**
     * @brief Get if a collision has occurred
     * @return true if collision
     */
    bool hasCollision() { return showCollision; }
signals:

private:
    const int compasSize = 48; ///< size of the compas image (compasSize x compasSize)
    const int barSpace = 150; ///< minimum size of the ProgressBar
    droneStatus status;       ///< status of the drone
    double height;            ///< current height of the drone
    QString name;             ///< name of the drone
    QProgressBar *speedPB;    ///< progress bar widget for the speed
    QProgressBar *powerPB;    ///< progress bar widget for the power
    Vector2D position;        ///< current position of the drone
    Vector2D goalPosition;    ///< goal position for the drone
    Vector2D direction;       ///< current direction
    Vector2D V;               ///< current speed vector
    Vector2D ForceCollision;  ///< force generated by the collision detection
    double speed;             ///< current speed
    double speedSetpoint;     ///< speed to reach if possible
    double power;             ///< current power
    double azimut;            ///< rotation angle of the drone
    QImage compasImg,stopImg,takeoffImg,landingImg;
    bool showCollision;       ///< true if a collision is detected
    QString serverName; // Example member variable

};

#endif // DRONE_H
